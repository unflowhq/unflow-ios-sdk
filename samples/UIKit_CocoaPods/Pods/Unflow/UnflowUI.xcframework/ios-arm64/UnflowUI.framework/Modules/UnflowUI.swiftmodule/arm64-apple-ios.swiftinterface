// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UnflowUI
import Combine
import Foundation
import SafariServices
import StoreKit
import Swift
import SwiftUI
import UIKit
import Unflow
@_exported import UnflowUI
import _AVKit_SwiftUI
import _Concurrency
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class UnflowSDK {
  public func openScreen(withID screenID: Swift.Int) throws
  public func setUserId(userId: Swift.String)
  public func setAttributes(attributes: [Swift.String : Swift.String])
  public func setCustomFonts(fonts: UnflowUI.Fonts)
  public func trackEvent<T>(_ key: Swift.String, attributes: T?) where T : Swift.Decodable, T : Swift.Encodable
  public func trackEvent(_ key: Swift.String)
  public func sync()
  @objc deinit
}
@available(iOS 13.0, *)
extension UnflowUI.UnflowSDK {
  public struct Config {
    public init(apiKey: Swift.String, enableLogging: Swift.Bool)
  }
  public static let client: UnflowUI.UnflowSDK
  public static func initialize(config: UnflowUI.UnflowSDK.Config, analyticsListener: UnflowUI.AnalyticsListener? = nil) -> UnflowUI.UnflowSDK
}
@available(iOS 13, *)
public struct OpenerView : SwiftUI.View {
  public init(subscriptionID: Swift.String? = nil, client: UnflowUI.UnflowSDK = UnflowSDK.client)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8UnflowUI10OpenerViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class UnflowServices {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class OpenerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol AnalyticsListener {
  func onEvent(event: UnflowUI.UnflowEvent)
}
@available(iOS 13.0, *)
public struct AuthorBlock : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8UnflowUI11AuthorBlockV4bodyQrvp", 0) __
}
public struct UnflowEvent {
  public var name: Swift.String
  public var type: Swift.String
  public var attributes: [Swift.String : Any]
}
@available(iOS 13.0, *)
public struct Typography : Swift.Hashable {
  public static func == (a: UnflowUI.Typography, b: UnflowUI.Typography) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, *)
public struct Fonts {
  public var title: SwiftUI.Font?
  public var subtitle: SwiftUI.Font?
  public var body: SwiftUI.Font?
  public var bodyBold: SwiftUI.Font?
  public var button: SwiftUI.Font?
  public var openerTitle: SwiftUI.Font?
  public var openerSubtitle: SwiftUI.Font?
  public init(title: SwiftUI.Font? = nil, subtitle: SwiftUI.Font? = nil, body: SwiftUI.Font? = nil, bodyBold: SwiftUI.Font? = nil, button: SwiftUI.Font? = nil, openerTitle: SwiftUI.Font? = nil, openerSubtitle: SwiftUI.Font? = nil)
}
