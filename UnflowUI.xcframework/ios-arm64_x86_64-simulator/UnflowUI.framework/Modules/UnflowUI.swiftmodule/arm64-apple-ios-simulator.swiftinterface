// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UnflowUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Combine
import Foundation
import Network
import SafariServices
import StoreKit
import Swift
import SwiftUI
import UIKit
import UIKit.UIScreen
@_exported import UnflowUI
import _AVKit_SwiftUI
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class UnflowSDK {
  public static var version: Swift.String
  public func openScreen(withID screenID: Swift.Int) throws
  public func setUserId(userId: Swift.String)
  public func setAttributes(attributes: [Swift.String : Swift.String])
  @available(iOS 16.0, *)
  public func setUserLocale(locale: Foundation.Locale = .autoupdatingCurrent, language: Foundation.Locale.LanguageCode)
  public func setUserLocale(locale: Foundation.Locale = .autoupdatingCurrent, language: Swift.String)
  public func setAttributes(attributes: [Swift.String : UnflowUI.UnflowAnalyticsValue])
  @available(*, deprecated, message: "Use `setCustomFonts(fonts:UnflowFonts)` instead. This change is required to enable custom fonts to display in text fields.")
  public func setCustomFonts(fonts: UnflowUI.Fonts)
  public func setCustomFonts(fonts: UnflowUI.UnflowFonts)
  public func close(complete: @escaping () -> ())
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func close() async
  #endif
  public func trackEvent(_ key: Swift.String, attributes: [Swift.String : UnflowUI.UnflowAnalyticsValue])
  public func trackEvent<T>(_ key: Swift.String, attributes: T?) where T : Swift.Decodable, T : Swift.Encodable
  public func trackEvent(_ key: Swift.String)
  public func registerToken(token: Swift.String)
  public func deregisterToken()
  public func sync()
  public func pause()
  public func resume()
  public func getOpeners(id spaceKey: Swift.String = Opener.defaultSpaceKey, completion: @escaping (Swift.Result<[UnflowUI.Opener], Swift.Error>) -> Swift.Void)
  public func openers(id spaceKey: Swift.String = Opener.defaultSpaceKey) -> Combine.AnyPublisher<[UnflowUI.Opener], Swift.Never>
  public func spaces() -> Combine.AnyPublisher<[UnflowUI.UnflowSpace], Swift.Never>
  public func updateApiKey(_ apiKey: Swift.String)
  @objc deinit
}
@available(iOS 13.0, *)
extension UnflowUI.UnflowSDK {
  public struct Config {
    public init(apiKey: Swift.String, enableLogging: Swift.Bool, openLinksInSafari: Swift.Bool = false, enablePrivacyMode: Swift.Bool = false, ignoreSilentMode: Swift.Bool = false)
  }
  public static let client: UnflowUI.UnflowSDK
  public static func initialize(config: UnflowUI.UnflowSDK.Config, analyticsListener: UnflowUI.AnalyticsListener? = nil) -> UnflowUI.UnflowSDK
}
public struct UnflowContent {
  public var text: Swift.String {
    get
  }
  public init()
}
public typealias PlatformView = UIKit.UIView
public typealias PlatformViewController = UIKit.UIViewController
public enum Introspect {
  public static func findChild<AnyViewType>(ofType type: AnyViewType.Type, in root: UnflowUI.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func findChild<AnyViewController>(ofType type: AnyViewController.Type, in root: UnflowUI.PlatformViewController) -> AnyViewController? where AnyViewController : UIKit.UIViewController
  public static func findChildUsingFrame<AnyViewType>(ofType type: AnyViewType.Type, in root: UnflowUI.PlatformView, from originalEntry: UnflowUI.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func previousSibling<AnyViewType>(containing type: AnyViewType.Type, from entry: UnflowUI.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func previousSibling<AnyViewType>(ofType type: AnyViewType.Type, from entry: UnflowUI.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  @available(macOS, unavailable)
  public static func previousSibling<AnyViewController>(containing type: AnyViewController.Type, from entry: UnflowUI.PlatformViewController) -> AnyViewController? where AnyViewController : UIKit.UIViewController
  public static func previousSibling<AnyViewController>(ofType type: AnyViewController.Type, from entry: UnflowUI.PlatformViewController) -> AnyViewController? where AnyViewController : UIKit.UIViewController
  public static func nextSibling<AnyViewType>(containing type: AnyViewType.Type, from entry: UnflowUI.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func nextSibling<AnyViewType>(ofType type: AnyViewType.Type, from entry: UnflowUI.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func findAncestor<AnyViewType>(ofType type: AnyViewType.Type, from entry: UnflowUI.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func findAncestorOrAncestorChild<AnyViewType>(ofType type: AnyViewType.Type, from entry: UnflowUI.PlatformView) -> AnyViewType? where AnyViewType : UIKit.UIView
  public static func findHostingView(from entry: UnflowUI.PlatformView) -> UnflowUI.PlatformView?
  public static func findViewHost(from entry: UnflowUI.PlatformView) -> UnflowUI.PlatformView?
}
public enum TargetViewSelector {
  public static func siblingContaining<TargetView>(from entry: UnflowUI.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func siblingContainingOrAncestor<TargetView>(from entry: UnflowUI.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func siblingContainingOrAncestorOrAncestorChild<TargetView>(from entry: UnflowUI.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func siblingOfType<TargetView>(from entry: UnflowUI.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func siblingOfTypeOrAncestor<TargetView>(from entry: UnflowUI.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func ancestorOrSiblingContaining<TargetView>(from entry: UnflowUI.PlatformView) -> TargetView? where TargetView : UIKit.UIView
  public static func ancestorOrSiblingOfType<TargetView>(from entry: UnflowUI.PlatformView) -> TargetView? where TargetView : UIKit.UIView
}
public enum NetworkError : Swift.Int, Swift.Error {
  case badResponse
  case badRequest
  case unauthorised
  case notFound
  case conflict
  case offline
  case other
  case failedToDecode
  public init(from error: Foundation.URLError)
  public init(from errorCode: Swift.Int)
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
@_Concurrency.MainActor(unsafe) public struct SpacesView<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(client: UnflowUI.UnflowSDK = UnflowSDK.client, filterDefault: Swift.Bool = true, @SwiftUI.ViewBuilder _ content: @escaping (([UnflowUI.UnflowSpace]) -> Content))
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8UnflowUI10SpacesViewV4bodyQrvp", 0) __<Content>
}
@available(iOS 13, *)
extension UnflowUI.SpacesView where Content == UnflowUI.SpacesHost<UnflowUI.SpaceView> {
  @_Concurrency.MainActor(unsafe) public init(client: UnflowUI.UnflowSDK = UnflowSDK.client, filterDefault: Swift.Bool = true, contentPadding: CoreFoundation.CGFloat = 16, showTitles: Swift.Bool = true, font: SwiftUI.Font? = nil, fontColor: SwiftUI.Color? = nil, bannerBackgroundColor: SwiftUI.Color? = nil, bannerTitleColor: SwiftUI.Color? = nil, bannerSubtitleColor: SwiftUI.Color? = nil)
}
@available(iOS 13, *)
extension UnflowUI.SpacesView {
  @_Concurrency.MainActor(unsafe) public init<ChildContent>(client: UnflowUI.UnflowSDK = UnflowSDK.client, content: @escaping (UnflowUI.UnflowSpace) -> ChildContent) where Content == UnflowUI.SpacesHost<ChildContent>, ChildContent : SwiftUI.View
}
@available(iOS 13, *)
public struct SpacesHost<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8UnflowUI10SpacesHostV4bodyQrvp", 0) __<Content>
}
@available(iOS 13, *)
public struct SpaceView : SwiftUI.View {
  public init(client: UnflowUI.UnflowSDK = .client, space: UnflowUI.UnflowSpace, contentPadding: CoreFoundation.CGFloat = 16, showTitle: Swift.Bool = true, font: SwiftUI.Font? = nil, fontColor: SwiftUI.Color? = nil, bannerBackgroundColor: SwiftUI.Color? = nil, bannerTitleColor: SwiftUI.Color? = nil, bannerSubtitleColor: SwiftUI.Color? = nil)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8UnflowUI9SpaceViewV4bodyQrvp", 0) __
}
@available(iOS 13.0, *)
@_Concurrency.MainActor(unsafe) public struct OpenerRail<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8UnflowUI10OpenerRailV4bodyQrvp", 0) __<Content>
}
public struct OpenerItemState : Swift.Equatable {
  public let opener: UnflowUI.Opener
  public let maxWidth: CoreFoundation.CGFloat
  public let numberOfOpeners: Swift.Int
  public static func == (a: UnflowUI.OpenerItemState, b: UnflowUI.OpenerItemState) -> Swift.Bool
}
@available(iOS 13.0, *)
extension UnflowUI.UnflowSDK {
  public func registerPushToken(token: Foundation.Data)
  public func deregisterPushToken()
  @discardableResult
  public func didReceiveNotification(userInfo: [Swift.AnyHashable : Any]) -> Swift.Bool
  public func receivedNotificationResponse(response: UserNotifications.UNNotificationResponse)
  public func processLaunchNotification(launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
}
@available(iOS 13.0, *)
extension Combine.Publisher {
  public func sideEffect(_ effect: @escaping () -> Swift.Void) -> Combine.Publishers.Map<Self, Self.Output>
}
@available(iOS 13, *)
@_Concurrency.MainActor(unsafe) public struct OpenerView<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public init(spaceKey: Swift.String? = nil, client: UnflowUI.UnflowSDK = UnflowSDK.client, limit: Swift.Int? = nil, @SwiftUI.ViewBuilder openerHost: @escaping ([UnflowUI.Opener]) -> Content)
  @_Concurrency.MainActor(unsafe) public init(spaceKey: Swift.String? = nil, limit: Swift.Int? = nil, backgroundColor: SwiftUI.Color? = nil, titleColor: SwiftUI.Color? = nil, subtitleColor: SwiftUI.Color? = nil) where Content == UnflowUI.OpenerSwitchingView
  @_Concurrency.MainActor(unsafe) public init<ItemContent>(contentPadding: CoreFoundation.CGFloat? = 16.0, scrollSettlingEnabled: Swift.Bool = true, itemContent: @escaping (UnflowUI.OpenerItemState) -> ItemContent) where Content == UnflowUI.OpenerRail<ItemContent>, ItemContent : SwiftUI.View
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8UnflowUI10OpenerViewV4bodyQrvp", 0) __<Content>
}
@available(iOS 13, *)
public struct OpenerSwitchingView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8UnflowUI19OpenerSwitchingViewV4bodyQrvp", 0) __
}
public struct UnflowSpace : Swift.Identifiable, Swift.Hashable {
  public let id: Swift.Int
  public let key: Swift.String?
  public let name: Swift.String?
  public let layout: UnflowUI.SpaceLayout
  public let openers: [UnflowUI.Opener]
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: UnflowUI.UnflowSpace, b: UnflowUI.UnflowSpace) -> Swift.Bool
  public typealias ID = Swift.Int
  public var hashValue: Swift.Int {
    get
  }
}
extension CoreFoundation.CGFloat {
  public func pixelsToPoints() -> CoreFoundation.CGFloat
}
public enum SpaceLayout : Swift.String, Swift.Codable, Swift.Equatable, Swift.CaseIterable {
  case visual, banner
  public init?(rawValue: Swift.String)
  public typealias AllCases = [UnflowUI.SpaceLayout]
  public typealias RawValue = Swift.String
  public static var allCases: [UnflowUI.SpaceLayout] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, *)
public class UnflowServices {
  @objc deinit
}
@available(iOS 13, *)
extension SwiftUI.View {
  @_disfavoredOverload public func onChange<V>(of value: V, perform action: @escaping (V) -> Swift.Void) -> some SwiftUI.View where V : Swift.Equatable
  
}
public struct Opener : Swift.Hashable, Swift.Identifiable {
  public static let defaultSpaceKey: Swift.String
  public var id: Swift.Int
  public var priority: Swift.Int
  public var title: Swift.String
  public var subtitle: Swift.String?
  public var imageURL: Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: UnflowUI.Opener, b: UnflowUI.Opener) -> Swift.Bool
  public typealias ID = Swift.Int
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIImage {
  public class func animationOrStatic(from data: Foundation.Data) -> UIKit.UIImage?
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class OpenerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOS 13, *)
public struct OpenerHost<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8UnflowUI10OpenerHostV4bodyQrvp", 0) __<Content>
}
public protocol AnalyticsListener {
  func onEvent(event: UnflowUI.UnflowEvent)
}
public protocol UnflowAnalyticsValue {
}
extension Swift.String : UnflowUI.UnflowAnalyticsValue {
}
extension Swift.Int : UnflowUI.UnflowAnalyticsValue {
}
extension Swift.Double : UnflowUI.UnflowAnalyticsValue {
}
extension Swift.Bool : UnflowUI.UnflowAnalyticsValue {
}
extension Foundation.Date : UnflowUI.UnflowAnalyticsValue {
}
public typealias UnflowAnalyticsArray = [UnflowUI.UnflowAnalyticsValue]
public typealias UnflowAnalyticsDictionary = [Swift.String : UnflowUI.UnflowAnalyticsValue]
extension Swift.Array : UnflowUI.UnflowAnalyticsValue where Element == UnflowUI.UnflowAnalyticsValue {
}
extension Swift.Dictionary : UnflowUI.UnflowAnalyticsValue where Key == Swift.String, Value == UnflowUI.UnflowAnalyticsValue {
}
public enum UnflowError : Swift.Error {
  case attributeTypeMismatch
  case uninitialised
  public static func == (a: UnflowUI.UnflowError, b: UnflowUI.UnflowError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13.0, *)
@_Concurrency.MainActor(unsafe) public struct OpenerBanner : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s8UnflowUI12OpenerBannerV4bodyQrvp", 0) __
}
public struct UnflowEvent {
  public var id: Swift.String
  public var occuredAt: Swift.Int64
  public var name: Swift.String
  public var metadata: [Swift.String : Any]
}
@available(iOS 13.0, *)
public struct Typography : Swift.Hashable, Swift.Equatable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: UnflowUI.Typography, b: UnflowUI.Typography) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol NetworkEnvironmentProviding {
  var apiUrl: Swift.String { get }
  var debug: Swift.Bool { get }
}
@available(iOS 13.0, *)
public struct Fonts {
  public var title: SwiftUI.Font?
  public var subtitle: SwiftUI.Font?
  public var body: SwiftUI.Font?
  public var bodyBold: SwiftUI.Font?
  public var button: SwiftUI.Font?
  public var openerTitle: SwiftUI.Font?
  public var openerSubtitle: SwiftUI.Font?
  public init(title: SwiftUI.Font? = nil, subtitle: SwiftUI.Font? = nil, body: SwiftUI.Font? = nil, bodyBold: SwiftUI.Font? = nil, button: SwiftUI.Font? = nil, openerTitle: SwiftUI.Font? = nil, openerSubtitle: SwiftUI.Font? = nil)
}
@available(iOS 13.0, *)
public struct UnflowFonts {
  public var title: UIKit.UIFont?
  public var subtitle: UIKit.UIFont?
  public var body: UIKit.UIFont?
  public var bodyBold: UIKit.UIFont?
  public var button: UIKit.UIFont?
  public var openerTitle: UIKit.UIFont?
  public var openerSubtitle: UIKit.UIFont?
  public init(title: UIKit.UIFont? = nil, subtitle: UIKit.UIFont? = nil, body: UIKit.UIFont? = nil, bodyBold: UIKit.UIFont? = nil, button: UIKit.UIFont? = nil, openerTitle: UIKit.UIFont? = nil, openerSubtitle: UIKit.UIFont? = nil)
}
extension UnflowUI.NetworkError : Swift.Equatable {}
extension UnflowUI.NetworkError : Swift.Hashable {}
extension UnflowUI.NetworkError : Swift.RawRepresentable {}
extension UnflowUI.SpaceLayout : Swift.Hashable {}
extension UnflowUI.SpaceLayout : Swift.RawRepresentable {}
extension UnflowUI.UnflowError : Swift.Equatable {}
extension UnflowUI.UnflowError : Swift.Hashable {}
